trigger:
  batch: true
  tags:
    include:
    - '*'
  branches:
    include:
    - main

pr:
  branches:
    include:
    - '*'
  paths:
    include:
    - '*'

stages:
  - stage: Build
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    dependsOn: []
    jobs:
#//////////////////////////////////////////////////////////////////////
#// Linux 
#//////////////////////////////////////////////////////////////////////
      - job: Linux
        pool:
          vmImage: ubuntu-latest
        timeoutInMinutes: 6
        variables:
          - name: version
            value: $[ replace(variables['Build.SourceBranch'], 'refs/tags/', '') ] 
        steps:
        - task: UseDotNet@2
          inputs:
            version: '8.x'
        - script: dotnet tool restore
          displayName: 'Restore .NET tools'
        - script: npm install
          displayName: 'Restore Node.js modules'
        - script: npm install -g vsce webpack webpack-cli
          displayName: 'Install Node tools'

        - script: dotnet cake --target=vsix --release-version=$(version) --configuration=release --arch=linux-x64
          displayName: 'Build VSIX (linux-x64)'
        - script: dotnet cake --target=vsix --release-version=$(version) --configuration=release --arch=linux-arm64
          displayName: 'Build VSIX (linux-arm64)'

        - publish: '$(System.DefaultWorkingDirectory)/artifacts'
          displayName: 'Publish Artifacts'
          artifact: 'Linux Build'
#//////////////////////////////////////////////////////////////////////
#// MacOS 
#//////////////////////////////////////////////////////////////////////
      - job: MacOS
        pool:
          vmImage: macos-latest
        timeoutInMinutes: 6
        variables:
          - name: version
            value: $[ replace(variables['Build.SourceBranch'], 'refs/tags/', '') ] 
        steps:
        - task: UseDotNet@2
          inputs:
            version: '8.x'
        - script: dotnet tool restore
          displayName: 'Restore .NET tools'
        - script: npm install
          displayName: 'Restore Node.js modules'
        - script: npm install -g vsce webpack webpack-cli
          displayName: 'Install Node tools'

        - script: dotnet cake --target=vsix --release-version=$(version) --configuration=release --arch=osx-x64
          displayName: 'Build VSIX (osx-x64)'
        - script: dotnet cake --target=vsix --release-version=$(version) --configuration=release --arch=osx-arm64
          displayName: 'Build VSIX (osx-arm64)'

        - publish: '$(System.DefaultWorkingDirectory)/artifacts'
          displayName: 'Publish Artifacts'
          artifact: 'MacOS Build'
#//////////////////////////////////////////////////////////////////////
#// Windows 
#//////////////////////////////////////////////////////////////////////
      - job: Windows
        pool:
          vmImage: windows-latest
        timeoutInMinutes: 10
        variables:
          - name: version
            value: $[ replace(variables['Build.SourceBranch'], 'refs/tags/', '') ] 
        steps:
        - task: UseDotNet@2
          inputs:
            version: '8.x'
        - script: dotnet tool restore
          displayName: 'Restore .NET tools'
        - script: npm install
          displayName: 'Restore Node.js modules'
        - script: npm install -g vsce webpack webpack-cli
          displayName: 'Install Node tools'

        - script: dotnet cake --target=vsix --release-version=$(version) --configuration=release --arch=win-x64
          displayName: 'Build VSIX (win-x64)'
        - script: dotnet cake --target=vsix --release-version=$(version) --configuration=release --arch=win-arm64
          displayName: 'Build VSIX (win-arm64)'

        - publish: '$(System.DefaultWorkingDirectory)/artifacts'
          displayName: 'Publish Artifacts'
          artifact: 'Windows Build'
#//////////////////////////////////////////////////////////////////////
#// Publish
#//////////////////////////////////////////////////////////////////////
      # - job: Publish
      #   dependsOn: [Linux, MacOS, Windows]
      #   condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      #   pool:
      #     vmImage: ubuntu-latest
      #   timeoutInMinutes: 4 
      #   steps:
      #   - download: current
      #     artifact: 'Linux Build'
      #   - download: current
      #     artifact: 'MacOS Build'
      #   - download: current
      #     artifact: 'Windows Build'
      #   - task: GitHubRelease@1
      #     inputs:
      #       gitHubConnection: 'upstream'
      #       repositoryName: '$(Build.Repository.Name)'
      #       action: 'create'
      #       tagSource: 'gitTag'
      #       assets: '$(Pipeline.Workspace)/**/*.vsix'



  - stage: Tests
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    dependsOn: []
    jobs:
#//////////////////////////////////////////////////////////////////////
#// MacOS Tests
#//////////////////////////////////////////////////////////////////////
      - job: MacOS
        pool:
          vmImage: macos-latest
        timeoutInMinutes: 10
        steps:
        - task: UseDotNet@2
          inputs:
            version: '8.x'
        - script: dotnet tool restore
          displayName: 'Restore .NET tools'
        - script: dotnet cake --target=test --configuration=release
          displayName: 'Run tests'
          continueOnError: true
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: 'artifacts/*.trx'
            failTaskOnFailedTests: true
            failTaskOnMissingResultsFile: true
#//////////////////////////////////////////////////////////////////////
#// Linux Tests
#//////////////////////////////////////////////////////////////////////
      - job: Linux
        pool:
          vmImage: ubuntu-latest
        timeoutInMinutes: 10
        steps:
        - task: UseDotNet@2
          inputs:
            version: '8.x'
        - script: dotnet tool restore
          displayName: 'Restore .NET tools'
        - script: dotnet cake --target=test --configuration=release
          displayName: 'Run tests'
          continueOnError: true
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: 'artifacts/*.trx'
            failTaskOnFailedTests: true
            failTaskOnMissingResultsFile: true
#//////////////////////////////////////////////////////////////////////
#// Windows Tests
#//////////////////////////////////////////////////////////////////////
      - job: Windows
        pool:
          vmImage: windows-latest
        timeoutInMinutes: 10
        steps:
        - task: UseDotNet@2
          inputs:
            version: '8.x'
        - script: dotnet tool restore
          displayName: 'Restore .NET tools'
        - script: dotnet cake --target=test --configuration=release
          displayName: 'Run tests'
          continueOnError: true
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: 'artifacts/*.trx'
            failTaskOnFailedTests: true
            failTaskOnMissingResultsFile: true

